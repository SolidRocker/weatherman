{"version":3,"sources":["util/Util.js","components/WeatherSpinner/WeatherSpinner.js","img/weatherIcons/thunder.svg","img/weatherIcons/drizzle.svg","img/weatherIcons/rain.svg","img/weatherIcons/snow.svg","img/weatherIcons/day.svg","img/weatherIcons/night.svg","img/weatherIcons/cloudy.svg","components/TimeSlider/TimeSlider.js","components/InfoDisplay/InfoDisplay.js","util/CountryList.js","components/CountryDropdown/CountryDropdownUtil.js","components/CountryDropdown/CountryDropdown.js","components/DayScroller/DayScroller.js","components/WeatherAlert/WeatherAlert.js","components/Weather/Weather.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["positionStackAPIKey","corsAnywhere","Util","toCapitalize","textToCap","input","split","res","forEach","element","slice","toUpperCase","toDayOfWeek","id","getHourMark","hourMark","hasSpace","hour","Date","getHours","spacing","postFix","getWeatherAPI","latitude","longitude","getGeocodeAPI","city","getReverseGeocodeAPI","createWeatherObj","data","dayCounter","daily","cDate","dt","dateString","getDay","newData","temp","day","Math","round","night","feels","feels_like","humidity","windspeed","wind_speed","sunrise","sunset","weather","main","description","icon","counter","minHour","maxHour","hourly","hourCounter","i","hourElem","newHourData","push","WeatherSpinner","props","onAnimationEnd","state","spinState","setState","isSpinning","prevProps","this","currClass","className","Spinner","animation","role","variant","displaySpinner","Component","TimeSlider","onUpdate","onUpdateTimeSlider","2","7","12","17","22","isByHour","getSliderClass","max","marks","getMarks","onChange","InfoDisplay","currSelection","currDT","currWeather","wThunderstorm","wDrizzle","wRain","wSnow","isDayTimeNow","wDay","wNight","wCloudy","src","getBGIcon","alt","getTemperature","countryList","label","cities","CountryDropdownToggle","React","forwardRef","ref","children","onClick","href","e","preventDefault","CountryDropdownMenu","style","labeledBy","useState","value","setValue","aria-labelledby","FormControl","autoFocus","placeholder","target","filter","child","key","toLowerCase","startsWith","CountryDropdown","objList","type","name","resList","map","elem","keyName","Dropdown","Header","Item","eventKey","Menu","as","onSelect","Toggle","country","generateFullList","DayScoller","renderBox","currContainerClass","currIconClass","iconSrc","alignCenter","dailyWeather","selected","WeatherAlert","hasInit","polling","enabled","url","interval","timeout","isDisplay","classes","Alert","displayAlert","Weather","closeModal","hasError","errorMsg","onSelectDayScroll","daySelection","currHour","onSelectDropdown","getCityGeocode","isInit","isLoading","navigator","self","geolocation","getCurrentPosition","position","axios","get","coords","then","response","length","locality","getWeatherData","catch","error","Modal","size","centered","show","onHide","closeButton","Title","Body","Footer","Button","weatherList","status","statusText","JSON","parse","stringify","cHour","err","console","log","message","showErrorPopup","showLoadingScreen","getDisplayDate","getCurrWeather","currSeection","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.03da851d.chunk.js","sourcesContent":["const openWeatherMapAPIKey = \"8a3b877f6488d0d35ad8827d3461a848\";\r\nconst positionStackAPIKey = \"a80e3d84441af6900f068affd975bd7b\";\r\nconst corsAnywhere = \"https://cors-anywhere.herokuapp.com/\";\r\n\r\nexport const Util = {\r\n\r\n    toCapitalize(textToCap) {\r\n        let input = textToCap.split(' ');\r\n        let res = '';\r\n        input.forEach(element => {\r\n            if(res !== '') {\r\n                res += ' ';\r\n            }\r\n            res += element.slice(0, 1).toUpperCase() + element.slice(1);\r\n        });\r\n        return res;\r\n    },\r\n\r\n    toDayOfWeek(id) {\r\n        switch(id) {\r\n            case 0: return \"sun\";\r\n            case 1: return \"mon\";\r\n            case 2: return \"tue\";\r\n            case 3: return \"wed\";\r\n            case 4: return \"thu\";\r\n            case 5: return \"fri\";\r\n            case 6: return \"sat\";\r\n            default: return \"\";\r\n        }\r\n    },\r\n\r\n    getHourMark(hourMark, hasSpace = false) {\r\n        let hour = new Date().getHours();\r\n        let res = (hour + hourMark) % 24;\r\n\r\n        let spacing = hasSpace ? \" \" : \"\";\r\n        let postFix = spacing + \"am\";\r\n        \r\n        if(res > 12) {\r\n            res -= 12;\r\n            postFix = spacing + \"pm\";\r\n        }\r\n        \r\n        if(res === 0) {\r\n            res = 12;\r\n        }\r\n        return res + postFix;\r\n    },\r\n\r\n    // All these APIs are in http instead of https (since they are free accounts), but\r\n    // GitHub Pages is in https. So need to prepend them 'cors-anywhere' before the API.\r\n    getWeatherAPI(latitude, longitude) {\r\n      return corsAnywhere\r\n                + \"https://api.openweathermap.org/data/2.5/onecall?lat=\"\r\n                + latitude\r\n                + \"&lon=\"\r\n                + longitude\r\n                + \"&exclude=minutely&units=metric&appid=\"\r\n                + openWeatherMapAPIKey;\r\n    },\r\n\r\n    getGeocodeAPI(city) {\r\n      return corsAnywhere\r\n                + \"http://api.positionstack.com/v1/forward?access_key=\"\r\n                + positionStackAPIKey\r\n                + \"&query=\"\r\n                + city;\r\n    },\r\n\r\n    getReverseGeocodeAPI(latitude, longitude) {\r\n      return corsAnywhere\r\n                + \"http://api.positionstack.com/v1/reverse?access_key=\"\r\n                + positionStackAPIKey\r\n                + \"&query=\"\r\n                + latitude\r\n                + \",\"\r\n                + longitude;\r\n    },\r\n\r\n    createWeatherObj(data) {\r\n        \r\n        let res = [];\r\n        let dayCounter = 0;\r\n\r\n        data.daily.forEach(element => {\r\n\r\n            //console.log(element);\r\n            let cDate = new Date(element.dt * 1000);\r\n            let dateString = Util.toDayOfWeek(cDate.getDay());\r\n    \r\n            let newData = {\r\n              temp: {\r\n                day: Math.round(element.temp.day),\r\n                night: Math.round(element.temp.night),\r\n              },\r\n              feels: {\r\n                day: Math.round(element.feels_like.day),\r\n                night: Math.round(element.feels_like.night),\r\n              },\r\n              humidity: element.humidity,\r\n              windspeed: Math.round(element.wind_speed * 3.6),  // Convert m/s to km/h\r\n              sunrise: element.sunrise,\r\n              sunset: element.sunset,\r\n              day: dateString,\r\n              weather: {\r\n                main: element.weather[0].main,\r\n                description: Util.toCapitalize(element.weather[0].description),\r\n                icon: element.weather[0].icon,\r\n              },\r\n              counter: dayCounter,\r\n            }\r\n\r\n            // Add hourly forecast to each day.\r\n            // Since API can only pull 48 hours, we intercept the code to reset the\r\n            // hours, and show Day 1's hourly data from Day 3 onwards.\r\n            // So, only Day 1 and Day 2's hourly data is correct.\r\n            let minHour = dayCounter * 24;\r\n            let maxHour = minHour + 23;\r\n            let hourly = [];\r\n            let hourCounter = 0;\r\n\r\n            // Reset hours\r\n            minHour = minHour > 24 ? 0: minHour;\r\n            maxHour = maxHour > 47 ? 23: maxHour;\r\n\r\n            for(let i = minHour; i <= maxHour; ++i) {\r\n\r\n                let hourElem = data.hourly[i];\r\n                let newHourData = {\r\n                    hour: hourCounter,\r\n                    temp: Math.round(hourElem.temp),\r\n                    feels: Math.round(hourElem.feels_like),\r\n                    humidity: hourElem.humidity,\r\n                    windspeed: Math.round(hourElem.wind_speed * 3.6),  // Convert m/s to km/h\r\n                    weather: {\r\n                      main: hourElem.weather[0].main,\r\n                      description: Util.toCapitalize(hourElem.weather[0].description),\r\n                      icon: hourElem.weather[0].icon,\r\n                    },\r\n                }\r\n                hourly.push(newHourData);\r\n                ++hourCounter;\r\n            }\r\n\r\n            newData.hourly = hourly;\r\n            res.push(newData);\r\n            ++dayCounter;\r\n        });\r\n        return res;\r\n    }\r\n}\r\n","import React, { Component} from 'react';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nimport '../root.css';\r\nimport './WeatherSpinner.css'\r\n\r\nclass WeatherSpinner extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      spinState: 0,\r\n      isSpinning: false\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n\r\n    if(this.props.isSpinning !== prevProps.isSpinning) {\r\n\r\n      // Start the spin state\r\n      if(!this.state.isSpinning && this.props.isSpinning) {\r\n        this.setState({\r\n          isSpinning: true,\r\n          spinState: 1\r\n        });\r\n      }\r\n\r\n      // If information has been loaded\r\n      if(this.state.isSpinning && !this.props.isSpinning) {\r\n        this.setState({\r\n          spinState: 2\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // 0 = Loading screen not shown\r\n  // 1 = Fade in loading screen\r\n  // 2 = Show loading screen\r\n  // 3 = Fade out loading screen\r\n  displaySpinner() {\r\n\r\n    if(!this.state.isSpinning) {\r\n      return null;\r\n    }\r\n\r\n    let currClass = 'spin-container';\r\n    switch(this.state.spinState) {\r\n      case 0:\r\n        currClass += ' spin-container-end-spin';\r\n        break;\r\n      case 1:\r\n        currClass += ' spin-container-start-spin spin-container-fade-in';\r\n        break;\r\n      case 2:\r\n        currClass += ' spin-container-fade-out';\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return (\r\n      <div className={currClass} onAnimationEnd={this.onAnimationEnd}>\r\n          <Spinner animation=\"border\" role=\"status\" variant=\"light\" className=\"spin\"/>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  onAnimationEnd = () => {\r\n\r\n    if(this.state.spinState === 2) {\r\n      this.setState({\r\n        spinState: 0,\r\n        isSpinning: false\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.displaySpinner()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherSpinner;\r\n","export default __webpack_public_path__ + \"static/media/thunder.19ff3c30.svg\";","export default __webpack_public_path__ + \"static/media/drizzle.9988edfd.svg\";","export default __webpack_public_path__ + \"static/media/rain.130d6250.svg\";","export default __webpack_public_path__ + \"static/media/snow.dce3f5e7.svg\";","export default __webpack_public_path__ + \"static/media/day.c33ef664.svg\";","export default __webpack_public_path__ + \"static/media/night.6cf4adcd.svg\";","export default __webpack_public_path__ + \"static/media/cloudy.24f9a474.svg\";","import React, { Component} from 'react';\r\nimport {Util} from '../../util/Util';\r\nimport Slider from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\n\r\nimport '../root.css';\r\nimport './TimeSlider.css'\r\n\r\nclass TimeSlider extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      spinState: 0,\r\n      isSpinning: false\r\n    }\r\n  }\r\n\r\n  getMarks() {\r\n      return {  2: Util.getHourMark(2),\r\n                7: Util.getHourMark(7),\r\n                12: Util.getHourMark(12),\r\n                17: Util.getHourMark(17),\r\n                22: Util.getHourMark(22),\r\n            }\r\n  }\r\n\r\n  getSliderClass() {\r\n      let res = 'time-slider';\r\n      if(!this.props.isByHour) {\r\n          res += ' time-slider-day'\r\n      }\r\n      return res;\r\n  }\r\n\r\n  onUpdate = hour => {\r\n    this.props.onUpdateTimeSlider(hour);\r\n  }\r\n\r\n  render() {\r\n      return (\r\n        <Slider\r\n            className={this.getSliderClass()}\r\n            max={23}\r\n            marks={this.getMarks()}\r\n            onChange={this.onUpdate}\r\n        />\r\n      );\r\n  }\r\n}\r\n\r\nexport default TimeSlider;","import React, { Component} from 'react';\r\nimport { WiHumidity, WiStrongWind, WiThermometer, WiCloud } from \"react-icons/wi\";\r\n\r\nimport wThunderstorm from \"../../img/weatherIcons/thunder.svg\";\r\nimport wDrizzle from \"../../img/weatherIcons/drizzle.svg\";\r\nimport wRain from \"../../img/weatherIcons/rain.svg\";\r\nimport wSnow from \"../../img/weatherIcons/snow.svg\";\r\nimport wDay from \"../../img/weatherIcons/day.svg\";\r\nimport wNight from \"../../img/weatherIcons/night.svg\";\r\nimport wCloudy from \"../../img/weatherIcons/cloudy.svg\";\r\n\r\nimport '../root.css';\r\nimport './InfoDisplay.css'\r\n\r\nimport TimeSlider from '../TimeSlider/TimeSlider';\r\n\r\nclass InfoDisplay extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currSelection: 0\r\n        }\r\n    }\r\n\r\n    isDayTimeNow() {\r\n        let currDT = new Date();\r\n        if(currDT < this.props.currWeather.sunrise || currDT > this.props.currWeather.sunset) {\r\n          return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getBGIcon() {\r\n        switch(this.props.currWeather.weather.main) {\r\n          case 'Thunderstorm':\r\n            return wThunderstorm;\r\n          case 'Drizzle':\r\n            return wDrizzle;\r\n          case 'Rain':\r\n            return wRain;\r\n          case 'Snow':\r\n            return wSnow;\r\n          case 'Clear':\r\n            if(this.isDayTimeNow()) {\r\n              return wDay;\r\n            }\r\n            return wNight;\r\n          default:\r\n            return wCloudy;  // includes cloudy.\r\n        }\r\n    }\r\n\r\n    getTemperature() {\r\n        if(this.isDayTimeNow()) {\r\n          return this.props.currWeather.temp.day;\r\n      }\r\n      return this.props.currWeather.temp.night;\r\n    }\r\n\r\n    getFeels() {\r\n        if(this.isDayTimeNow()) {\r\n          return this.props.currWeather.feels.day;\r\n      }\r\n      return this.props.currWeather.feels.night;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"info-body\">\r\n                <img className=\"info-bg-icon\" src={this.getBGIcon()} alt={this.props.currWeather.weather.main}></img>\r\n\r\n                <div className=\"info-temp\">{this.getTemperature()}&deg;</div>\r\n\r\n                <div className=\"info-desc-text\">\r\n                    <WiCloud className=\"info-desc-icon\"/>\r\n                    <span>\r\n                        <b>{this.props.currWeather.weather.description}</b>\r\n                    </span>\r\n                </div>\r\n                \r\n                <div className=\"info-desc-text\">\r\n                    <WiHumidity className=\"info-desc-icon\"/>\r\n                    <span>\r\n                        Humidity: <b>{this.props.currWeather.humidity}%</b>\r\n                    </span>\r\n                </div>\r\n\r\n                <div className=\"info-desc-text\">\r\n                    <WiStrongWind className=\"info-desc-icon\"/>\r\n                    <span>\r\n                        Wind Speed: <b>{this.props.currWeather.windspeed}km/h</b>\r\n                    </span>\r\n                </div>\r\n\r\n                <div className=\"info-desc-text\">\r\n                    <WiThermometer className=\"info-desc-icon\"/>\r\n                    <span>\r\n                        Feels Like: <b>{this.getTemperature()}&deg;C</b>\r\n                    </span>\r\n                </div>\r\n\r\n                <div className=\"info-space\"></div>\r\n\r\n                <TimeSlider\r\n                    className=\"info-time-slider\"\r\n                    onUpdateTimeSlider={this.props.onUpdateTimeSlider}\r\n                    isByHour={this.props.isByHour}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InfoDisplay;","export const countryList = [\r\n    {label: \"Belgium\", cities: [\"Belgium\"]},\r\n    {label: \"China\", cities: [\r\n        \"Beijing\",\r\n        \"Changsha\",\r\n        \"Chongqing\",\r\n        \"Fuzhou\",\r\n        \"Guangzhou\",\r\n        \"Lanzhou\",\r\n        \"Nanjing\",\r\n        \"Harbin\",\r\n        \"Shanghai\",\r\n    ]},\r\n    {label: \"France\", cities: [\r\n        \"Nantes\",\r\n        \"Lyon\",\r\n        \"Marseille\",\r\n        \"Paris\",\r\n    ]},\r\n    {label: \"Germany\", cities: [\r\n        \"Berlin\",\r\n        \"Dusseldorf\",\r\n        \"Frankfurt\",\r\n        \"Hamburg\",\r\n        \"Munich\",\r\n        \"Stuttgart\",\r\n        \"Qwertyuuiopasdfghjkl\"\r\n    ]},\r\n    {label: \"Malaysia\", cities: [\r\n        \"George Town\",\r\n        \"Ipoh\",\r\n        \"Johor Bahru\",\r\n        \"Kuala Lumpur\",\r\n        \"Kuala Terengganu\",\r\n        \"Malacca\"\r\n    ]},\r\n    {label: \"Nepal\", cities: [\"Nepal\"]},\r\n    {label: \"Singapore\", cities: [\"Singapore\"]},\r\n    {label: \"Taiwan\", cities: [\r\n        \"Taipei\",\r\n        \"Taichung\",\r\n        \"Kaoshiung\",\r\n    ]},\r\n    {label: \"USA\", cities: [\r\n        \"Atlanta\",\r\n        \"Denver\",\r\n        \"Houston\",\r\n        \"Miami\",\r\n        \"New York\",\r\n        \"Orlando\",\r\n        \"Phoenix\",\r\n        \"Los Angeles\",\r\n        \"Las Vegas\",\r\n        \"San Francisco\",\r\n        \"Seattle\",\r\n        \"Washington DC\"\r\n    ]},\r\n]\r\n","import React, {useState} from 'react';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport {BiDownArrow} from 'react-icons/bi'\r\n\r\nexport const CountryDropdownToggle = React.forwardRef(({ children, onClick }, ref) => (\r\n    <div\r\n      href=\"\"\r\n      ref={ref}\r\n      className=\"country-dropdown-current\"\r\n      onClick={(e) => {\r\n        e.preventDefault();\r\n        onClick(e);\r\n      }}\r\n    >\r\n      {children}\r\n      <span className=\"country-dropdown-arrow\">&nbsp;<BiDownArrow/></span>\r\n    </div>\r\n  ));\r\n  \r\n  export const CountryDropdownMenu = React.forwardRef(\r\n    ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\r\n      const [value, setValue] = useState('');\r\n\r\n      return (\r\n        <div\r\n          ref={ref}\r\n          style={style}\r\n          className={className}\r\n          aria-labelledby={labeledBy}\r\n        >\r\n          <FormControl\r\n            autoFocus\r\n            className=\"mx-3 my-2 w-auto\"\r\n            placeholder=\"Type to filter...\"\r\n            onChange={(e) => setValue(e.target.value)}\r\n            value={value}\r\n          />\r\n          <ul className=\"list-unstyled\">\r\n            {children.filter(\r\n              (child) => !value || child.key.toLowerCase().startsWith(value),\r\n            )}\r\n          </ul>\r\n        </div>\r\n      );\r\n    },\r\n  );","import React, { Component} from 'react';\r\nimport {countryList} from '../../util/CountryList';\r\nimport {CountryDropdownToggle, CountryDropdownMenu} from './CountryDropdownUtil';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\n\r\nimport '../root.css';\r\nimport './CountryDropdown.css'\r\n\r\nclass CountryDropdown extends Component {\r\n\r\n    generateFullList() {\r\n\r\n      let objList = [];\r\n\r\n      countryList.forEach(element => {\r\n        objList.push({type: \"country\", name: element.label});\r\n        element.cities.forEach(city => {\r\n          objList.push({type: \"city\", name: city});\r\n        });\r\n      });\r\n\r\n      let resList = objList.map((elem, i) => {\r\n        if(elem.type === \"country\") {\r\n          let keyName = elem.name + '_' + elem.type;\r\n          return <Dropdown.Header key={keyName} className=\"country-dropdown-country\">{elem.name.toUpperCase()}</Dropdown.Header>\r\n        }\r\n        return <Dropdown.Item key={elem.name} eventKey={elem.name} className=\"country-dropdown-city-multi\">&nbsp;&nbsp;{elem.name}</Dropdown.Item>\r\n      });\r\n\r\n      return(\r\n        <Dropdown.Menu as={CountryDropdownMenu} className=\"country-dropdown-menu\">\r\n          {resList}\r\n        </Dropdown.Menu>\r\n      );\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <Dropdown\r\n          className=\"country-dropdown\"\r\n          onSelect={this.props.onSelect}>\r\n\r\n          <Dropdown.Toggle as={CountryDropdownToggle}>\r\n              {this.props.country}\r\n          </Dropdown.Toggle>\r\n          {this.generateFullList()}\r\n        </Dropdown>\r\n      )\r\n    }\r\n}\r\n\r\nexport default CountryDropdown;","import React, { Component} from 'react';\r\nimport ScrollMenu from 'react-horizontal-scrolling-menu';\r\n\r\nimport '../root.css';\r\nimport './DayScroller.css'\r\n\r\nclass DayScoller extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currSelection: 0\r\n        }\r\n    }\r\n\r\n    onSelect = key => {\r\n        this.setState({\r\n            currSelection: key\r\n        })\r\n        this.props.onUpdate(key);\r\n    }\r\n\r\n    renderBox = (element, i) => {\r\n\r\n        let currContainerClass = \"scroll-box\";\r\n        let currIconClass = \"scroll-arrow-hidden\";\r\n\r\n        if(this.state.currSelection == i) {\r\n            currContainerClass = \"scroll-box-active\";\r\n            currIconClass = \"scroll-arrow\";\r\n        }\r\n\r\n        let iconSrc = \"http://openweathermap.org/img/wn/\" + element.weather.icon + \"@4x.png\";\r\n\r\n        return (\r\n        <div key={i} className={currContainerClass}>\r\n            <div className={currIconClass}></div>\r\n            <div className=\"scroll-date\">{element.day.toUpperCase()}</div>\r\n            <img className=\"scroll-icon\" src={iconSrc} alt={element.weather.description}></img>\r\n            <div className=\"scroll-temp-day\">{element.temp.day}&deg;</div>\r\n            <div className=\"scroll-temp-night\">{element.temp.night}&deg;</div>\r\n        </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n      return (\r\n            <ScrollMenu\r\n                alignCenter={false}\r\n                data={this.props.dailyWeather.map(this.renderBox)}\r\n                selected={this.props.currSelection}\r\n                onSelect={this.onSelect}\r\n            />\r\n      )\r\n    }\r\n}\r\n\r\nexport default DayScoller;","import React, { Component} from 'react';\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport { Online, Offline } from \"react-detect-offline\";\r\n\r\nimport '../root.css';\r\nimport './WeatherAlert.css'\r\n\r\nclass WeatherAlert extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasInit: false,\r\n      polling: {\r\n        enabled: true,\r\n        url: 'https://ipv4.icanhazip.com/',\r\n        interval: 5000,\r\n        timeout: 3000\r\n      } \r\n    }\r\n  }\r\n  displayAlert(isDisplay, classes) {\r\n\r\n    // Stops the alert from showing upon initializing app.\r\n    if(!isDisplay && !this.state.hasInit) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div className={classes}>\r\n          <Alert className={classes} variant={'danger'} onAnimationEnd={this.onAnimationEnd}>\r\n            You are currently offline. Please check your internet connection.\r\n          </Alert>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  onAnimationEnd = () => {\r\n    this.setState({\r\n      hasInit: true\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n       <Online polling={this.state.polling}>\r\n          {this.displayAlert(false, 'weather-alert-fade-out')}\r\n        </Online>\r\n       <Offline polling={this.state.polling}>\r\n          {this.displayAlert(true, 'weather-alert-stay weather-alert-fade-in')}\r\n        </Offline>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherAlert;\r\n","import axios from 'axios';\nimport React, {Component} from 'react';\nimport {Util} from '../../util/Util';\nimport '../root.css';\nimport './Weather.css';\n\nimport WeatherSpinner from '../WeatherSpinner/WeatherSpinner';\nimport InfoDisplay from '../InfoDisplay/InfoDisplay';\nimport CountryDropdown from '../CountryDropdown/CountryDropdown';\nimport DayScroller from '../DayScroller/DayScroller';\n\nimport Button from 'react-bootstrap/Button'\nimport Modal from 'react-bootstrap/Modal';\nimport WeatherAlert from '../WeatherAlert/WeatherAlert';\n\nclass Weather extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isInit: false,\n      isLoading: true,\n      latitude: 47.67401743463503,\n      longitude: -122.1361362693161,\n\n      country: '',\n      dailyWeather: [],\n      currSelection: 0,\n      currWeather: {},\n\n      currHour: 0,\n      isByHour: false,\n\n      hasError: false,\n      errorMsg: ''\n    }\n  }\n\n  componentDidMount() {\n\n    if (\"geolocation\" in navigator) {\n\n      let self = this;\n      navigator.geolocation.getCurrentPosition(function(position) {\n        axios.get(Util.getReverseGeocodeAPI(position.coords.latitude, position.coords.longitude))\n        .then(response => {\n          \n          //console.log(response);\n          if(response.data.data.length > 1) {\n            self.setState({\n              country: response.data.data[0].locality\n            });\n          }\n\n          self.setState({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude,\n          }, () => {\n            self.getWeatherData();\n          });\n        })\n        .catch(error => {\n          self.setState({\n            country: 'Seattle'\n          });\n          self.getWeatherData();\n        })\n      });\n    }\n  }\n\n  closeModal = () => {\n    this.setState({\n      hasError: false,\n      errorMsg: ''\n    })\n  }\n\n  showErrorPopup() {\n\n    return (\n      <Modal\n        size=\"md\"\n        centered\n        show={this.state.hasError}\n        onHide={this.closeModal}\n        >\n        <Modal.Header closeButton>\n          <Modal.Title>Error Loading Weather Data</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>{this.state.errorMsg}</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={this.closeModal}>Close</Button>\n        </Modal.Footer>\n      </Modal>\n    )\n  }\n\n  getWeatherData() {\n\n    let self = this;\n    axios.get(Util.getWeatherAPI(this.state.latitude, this.state.longitude))\n    .then(response => {\n      \n      let weatherList = Util.createWeatherObj(response.data);\n\n      this.setState({\n        dailyWeather: weatherList,\n        isInit: true,\n        isLoading: false,\n        isByHour: false,\n        currHour: 0,\n        currWeather: weatherList[0]\n      });\n    })\n    .catch(error => {\n\n      let errorMsg = \"Network error. Please try again.\";\n      if(error.response) {\n        errorMsg = \"Error \" + error.response.status + \": \" + error.response.statusText + \". Please try again.\";\n      }\n\n      self.setState({\n        isLoading: false,\n        hasError: true,\n        errorMsg: errorMsg,\n      });\n    });\n  }\n\n  getCurrWeather() {\n\n    let res = JSON.parse(JSON.stringify(this.state.currWeather));\n    if(this.state.isByHour) {\n\n      let cHour = res.hourly[this.state.currHour];\n      res.temp.day = res.temp.night = cHour.temp;\n      res.feels.day = res.feels.night = cHour.feels;\n      res.humidity = cHour.humidity;\n      res.weather = cHour.weather;\n      res.windspeed = cHour.windspeed;\n    }\n    return res;\n  }\n\n  getDisplayDate() {\n    let res = Util.toCapitalize(this.state.currWeather.day) + \", \";\n    res += Util.getHourMark(this.state.currHour, true);\n    return res;\n  }\n\n  getCityGeocode(city) {\n    this.setState({\n      isLoading: true\n    });\n    \n    axios.get(Util.getGeocodeAPI(city), {timeout: 5000})\n    .then(response => {\n      this.setState({\n        latitude: response.data.data[0].latitude,\n        longitude: response.data.data[0].longitude,\n        country: city\n      }, () => {\n        this.getWeatherData();\n      });\n    })\n    .catch(err => {\n\n      console.log(err.message);\n      let errMsg = \"Cannot load data from city. Please try again.\"\n      this.setState({\n        isLoading: false,\n        hasError: true,\n        errorMsg: errMsg\n      });\n    });\n  }\n\n  showLoadingScreen() {\n    return <WeatherSpinner isSpinning={this.state.isLoading}/>\n  }\n\n  onSelectDayScroll = (daySelection) => {\n    this.setState({\n      currSelection: daySelection,\n      currWeather: this.state.dailyWeather[daySelection],\n      isByHour: false,\n      currHour: 0,\n    });\n  }\n\n  onSelectDropdown = (city) => {\n    this.getCityGeocode(city);\n  }\n\n  onUpdateTimeSlider = (hour) => {\n    this.setState({\n      currHour: hour,\n      isByHour: true\n    });\n  }\n\n  render() {\n\n    if(!this.state.isInit) {\n      return null;\n    }\n\n    return (\n      <div className=\"weather\">\n\n        {this.showErrorPopup()}\n        {this.showLoadingScreen()}\n\n        <header className=\"weather-header\">\n          <WeatherAlert />\n          <CountryDropdown\n            country={this.state.country}\n            onSelect={this.onSelectDropdown}\n          />\n          <div className=\"weather-time\">{this.getDisplayDate()}&nbsp;</div>\n        </header>\n\n        <div className=\"weather-body-bg\">\n          <InfoDisplay\n            currWeather={this.getCurrWeather()}\n            onUpdateTimeSlider={this.onUpdateTimeSlider}\n            isByHour={this.state.isByHour}\n          />\n        </div>\n\n        <DayScroller\n          dailyWeather={this.state.dailyWeather}\n          currSelection={this.state.currSeection}\n          onUpdate={this.onSelectDayScroll}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Weather;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Weather from '../src/components/Weather/Weather';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <Weather />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}